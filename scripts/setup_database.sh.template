#!/bin/bash

# Define usage function
usage() {
  echo "Usage: $0 [OPTIONS]"
  echo "Sets up the database for the dashboard application."
  echo ""
  echo "Options:"
  echo "  --reset       Drop and recreate the database (WARNING: destroys all data)"
  echo "  --no-seed     Skip seeding the database with initial data"
  echo "  --dev         Setup for development environment"
  echo "  --prod        Setup for production environment"
  echo "  --help        Display this help message"
  echo ""
  exit 1
}

# Parse command line options
RESET=false
SEED=true
ENV="development"

while [[ "$#" -gt 0 ]]; do
  case $1 in
    --reset) RESET=true ;;
    --no-seed) SEED=false ;;
    --dev) ENV="development" ;;
    --prod) ENV="production" ;;
    --help) usage ;;
    *) echo "Unknown parameter: $1"; usage ;;
  esac
  shift
done

# Default database settings (will be overridden by .env if present)
DBHOST="localhost"
DBPORT="5432"
DBNAME="dashboard"
PG_SUPERUSER="postgres"
PG_SUPERUSER_PASS=""  # Empty by default, should be provided by environment or prompt

# Function to prompt for password if not set
prompt_password_if_empty() {
  local password_var="$1"
  local role_name="$2"
  
  if [ -z "${!password_var}" ]; then
    read -s -p "Enter password for $role_name: " PASSWORD
    echo
    eval $password_var=\$PASSWORD
  fi
}

# Look for .env file and source it if exists
if [ -f .env ]; then
  echo "Loading configuration from .env file"
  source .env
else
  echo "No .env file found, using default values or prompting for input"
fi

# If passwords not set, prompt for them
prompt_password_if_empty "PG_SUPERUSER_PASS" "PostgreSQL superuser ($PG_SUPERUSER)"
prompt_password_if_empty "DASHBOARD_ADMIN_PASSWORD" "dashboard_admin role"
prompt_password_if_empty "DASHBOARD_USER_PASSWORD" "dashboard_user role"

# Print settings (except passwords)
echo "Database Settings:"
echo "  Host:      $DBHOST"
echo "  Port:      $DBPORT"
echo "  Database:  $DBNAME"
echo "  Superuser: $PG_SUPERUSER"
echo "  Environment: $ENV"
echo "  Reset database: $RESET"
echo "  Seed database: $SEED"
echo "  Roles to create: dashboard_admin, dashboard_user"

# Confirm before proceeding
read -p "Continue with these settings? (y/n): " CONFIRM
if [ "$CONFIRM" != "y" ]; then
  echo "Aborted."
  exit 1
fi

# Set PGPASSWORD for passwordless connection
export PGPASSWORD="$PG_SUPERUSER_PASS"

# Step 1: Handle database reset if requested
if [ "$RESET" = true ]; then
  echo "WARNING: You are about to DROP the database $DBNAME and ALL its data!"
  read -p "Are you ABSOLUTELY sure? (type 'yes' to confirm): " CONFIRM_RESET
  if [ "$CONFIRM_RESET" != "yes" ]; then
    echo "Database reset aborted."
    exit 1
  fi
  
  echo "Dropping database and roles..."
  psql -h $DBHOST -p $DBPORT -U $PG_SUPERUSER -d postgres <<EOF
  -- Drop the database if it exists
  DROP DATABASE IF EXISTS $DBNAME;
  
  -- Drop roles if they exist
  DROP ROLE IF EXISTS dashboard_user;
  DROP ROLE IF EXISTS dashboard_admin;
EOF
  if [ $? -ne 0 ]; then
    echo "Error: Failed to drop database and roles."
    exit 1
  fi
  echo "Database and roles dropped successfully."
fi

# Step 2: Create roles as superuser
echo "Creating database roles..."
psql -h $DBHOST -p $DBPORT -U $PG_SUPERUSER -d postgres <<EOF
-- Create roles if they don't exist
DO \$\$
BEGIN
  IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'dashboard_admin') THEN
    CREATE ROLE dashboard_admin WITH LOGIN PASSWORD '$DASHBOARD_ADMIN_PASSWORD' CREATEDB CREATEROLE;
  ELSE
    ALTER ROLE dashboard_admin WITH PASSWORD '$DASHBOARD_ADMIN_PASSWORD';
  END IF;
  
  IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'dashboard_user') THEN
    CREATE ROLE dashboard_user WITH LOGIN PASSWORD '$DASHBOARD_USER_PASSWORD';
  ELSE
    ALTER ROLE dashboard_user WITH PASSWORD '$DASHBOARD_USER_PASSWORD';
  END IF;
END
\$\$;
EOF

if [ $? -ne 0 ]; then
  echo "Error: Failed to create database roles. Check your PostgreSQL connection and credentials."
  exit 1
fi

# Step 3: Create the database if it doesn't exist
echo "Creating database if it doesn't exist..."
psql -h $DBHOST -p $DBPORT -U $PG_SUPERUSER -d postgres <<EOF
SELECT 'CREATE DATABASE $DBNAME OWNER dashboard_admin' 
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '$DBNAME')\gexec
EOF

if [ $? -ne 0 ]; then
  echo "Error: Failed to create database. Check your PostgreSQL connection and credentials."
  exit 1
fi

# Step 4: Create .env file with connection strings if it doesn't exist or we're resetting
if [ ! -f .env ] || [ "$RESET" = true ]; then
  echo "Creating .env file with database connection details..."
  cat > .env <<EOF
DATABASE_URL=postgresql://dashboard_user:$DASHBOARD_USER_PASSWORD@$DBHOST:$DBPORT/$DBNAME
DASHBOARD_ADMIN_DB_URL=postgresql://dashboard_admin:$DASHBOARD_ADMIN_PASSWORD@$DBHOST:$DBPORT/$DBNAME

SECRET_KEY=$(openssl rand -hex 24)
ENV=$ENV
EOF
  echo ".env file created"
else
  echo ".env file already exists, not modifying"
fi

# Step 5: Initialize database schema and seed data if requested
if [ "$SEED" = true ]; then
  echo "Initializing database schema and seeding data..."
  python init_db.py --db-url "postgresql://dashboard_admin:$DASHBOARD_ADMIN_PASSWORD@$DBHOST:$DBPORT/$DBNAME" --seed --config config/db_seed.yaml --set-permissions
  
  if [ $? -ne 0 ]; then
    echo "Warning: Database initialization might not have completed successfully."
  else
    echo "Database initialized successfully."
  fi
fi

# Step 6: Update database functions
echo "Updating database functions..."
python update_db_functions.py --db-url "postgresql://dashboard_admin:$DASHBOARD_ADMIN_PASSWORD@$DBHOST:$DBPORT/$DBNAME"

if [ $? -ne 0 ]; then
  echo "Warning: Function updates might not have completed successfully."
else
  echo "Database functions updated successfully."
fi

echo "Database setup completed successfully!"
echo ""
echo "You can now run the application with:"
echo "  source .env && cd .. && python main.py"